module InputArbNeuralNetwork(network,vec,answer) where
import Prelude

network :: [[[Integer]]]
network = [ [ [19, 6, -10, 13, -1, -6, -5, 19, -16], [11, -16, 11, 9, -13, -14, -4, 13, -5], [-19, 13, -10, 3, 20, -2, -10, 8, -5], [-17, -5, 8, -17, -7, 3, -7, -5, -19], [17, 20, -20, -19, 10, -6, 12, -1, 1], [18, -16, 4, 2, -15, 6, -19, 8, 5], [-1, -13, 2, -17, 0, 17, 12, 3, -11], [-6, -15, 4, 6, -19, 3, 16, -18, 3], [-11, -17, -9, 20, -20, -5, 3, 13, 10], [-2, 14, -3, -17, -7, 14, 5, 6, -7], [12, -3, 16, -10, -19, -10, 15, 17, 1], [7, 12, 4, -11, -10, 17, 10, -11, -13] ], [ [-16, -18, 20, 14, 0, -18, 0, 13, 5, -7, 8, -9], [16, -1, 8, -20, 19, 19, -10, -18, -16, 12, 10, 16], [5, -12, -15, 11, 19, 5, 18, -8, 17, -14, -4, 6], [-11, 16, 9, 14, -1, -4, -16, -6, -16, -18, -5, -18], [-10, 15, -15, -5, 16, -16, 0, 10, 2, 16, 1, 10], [0, -2, -18, 6, 15, -2, -9, -17, 3, 20, -14, -19], [5, -9, 6, 9, 3, -10, -19, 13, -16, -4, -3, -10], [10, 18, 20, -9, 13, 0, -19, 2, -12, -7, -3, -18], [-20, 8, -5, 3, 18, 1, 15, 2, -19, 0, 1, 4], [20, 12, 7, -17, -13, -17, -7, 17, -10, 3, -3, -8], [-8, 8, -17, 0, -10, 0, 12, -10, -2, -4, -17, -5] ], [ [18, 18, 17, 19, 7, 7, 13, 6, -2, -1, 19], [15, 12, 2, 11, -8, -16, -2, 4, -4, -15, 18], [-14, 6, -3, -13, 16, 15, 4, 19, -11, 1, -15], [-4, 9, -19, -18, 1, 7, 11, 20, 6, 5, -19], [-3, 6, -7, 1, -17, -14, -14, -2, -17, -8, -17], [1, 0, -11, 5, -7, -3, -16, 14, 3, 0, 2], [4, 12, -17, 1, 2, -8, -4, -3, 3, 13, -18], [-15, 3, -5, -8, 9, 13, 5, -9, -14, -5, -20] ], [ [5, -20, -7, -19, -16, -4, 14, 14] ] ]

vec :: [Integer]
vec = [-13, 8, 5, -10, -2, -3, 13, 14, 14]

answer :: Integer
answer = 0

